//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""AM"",
            ""id"": ""df3178d4-1fc0-4019-a915-0176811fa0d4"",
            ""actions"": [
                {
                    ""name"": ""Direction"",
                    ""type"": ""Value"",
                    ""id"": ""a3cce783-1e4e-4968-b7d7-595fbb110070"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""e7a1ee4a-c27d-4c1b-8f28-fac14beed51c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""inventory"",
                    ""type"": ""Button"",
                    ""id"": ""429a28a8-fc2e-404d-880e-f5ccd56c4eb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""grab"",
                    ""type"": ""Button"",
                    ""id"": ""56fd2e41-20d5-4add-b9b6-985751548f66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""52d758ca-0695-4ea4-a152-ae03b0067793"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""run"",
                    ""type"": ""Button"",
                    ""id"": ""9a8fcdba-d628-414d-8e48-d3a3bf4a14c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f275a228-c38e-444d-b2ee-e0f10aad831c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1201f571-d162-4ebc-95e1-ac67cc20e9cd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9b55ab4e-e4c9-428a-a601-7948dbcd7d64"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""12528c4e-b2cc-435d-95e7-6aa1dc151501"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3241c1b-23bb-437e-bdc5-3d1295831ddc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""54fb5f7c-a5f6-440c-83f3-01fb1a1a6387"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60997cd2-e391-4281-aeaf-810f6e55c716"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""68d18752-d182-4284-88fe-0431f71e5a05"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""381ad287-394c-475d-b22b-e7e4b8c0e3e5"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bcda4705-6c12-4723-ac2f-a2c226d00e69"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4bbb1cdb-f006-47ef-bbfd-f7110149454d"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""047447a4-08bb-478e-a991-12bcfc72aa6e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ddc977d-240a-4b2a-91d9-2b664475e23b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ecffe7b-a676-42b7-8c8c-52e85d1ab7dc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74896f43-1052-4a84-82a6-63435c279016"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AM
        m_AM = asset.FindActionMap("AM", throwIfNotFound: true);
        m_AM_Direction = m_AM.FindAction("Direction", throwIfNotFound: true);
        m_AM_rotation = m_AM.FindAction("rotation", throwIfNotFound: true);
        m_AM_inventory = m_AM.FindAction("inventory", throwIfNotFound: true);
        m_AM_grab = m_AM.FindAction("grab", throwIfNotFound: true);
        m_AM_shoot = m_AM.FindAction("shoot", throwIfNotFound: true);
        m_AM_run = m_AM.FindAction("run", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AM
    private readonly InputActionMap m_AM;
    private List<IAMActions> m_AMActionsCallbackInterfaces = new List<IAMActions>();
    private readonly InputAction m_AM_Direction;
    private readonly InputAction m_AM_rotation;
    private readonly InputAction m_AM_inventory;
    private readonly InputAction m_AM_grab;
    private readonly InputAction m_AM_shoot;
    private readonly InputAction m_AM_run;
    public struct AMActions
    {
        private @Controls m_Wrapper;
        public AMActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction => m_Wrapper.m_AM_Direction;
        public InputAction @rotation => m_Wrapper.m_AM_rotation;
        public InputAction @inventory => m_Wrapper.m_AM_inventory;
        public InputAction @grab => m_Wrapper.m_AM_grab;
        public InputAction @shoot => m_Wrapper.m_AM_shoot;
        public InputAction @run => m_Wrapper.m_AM_run;
        public InputActionMap Get() { return m_Wrapper.m_AM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AMActions set) { return set.Get(); }
        public void AddCallbacks(IAMActions instance)
        {
            if (instance == null || m_Wrapper.m_AMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AMActionsCallbackInterfaces.Add(instance);
            @Direction.started += instance.OnDirection;
            @Direction.performed += instance.OnDirection;
            @Direction.canceled += instance.OnDirection;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
            @inventory.started += instance.OnInventory;
            @inventory.performed += instance.OnInventory;
            @inventory.canceled += instance.OnInventory;
            @grab.started += instance.OnGrab;
            @grab.performed += instance.OnGrab;
            @grab.canceled += instance.OnGrab;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
            @run.started += instance.OnRun;
            @run.performed += instance.OnRun;
            @run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IAMActions instance)
        {
            @Direction.started -= instance.OnDirection;
            @Direction.performed -= instance.OnDirection;
            @Direction.canceled -= instance.OnDirection;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
            @inventory.started -= instance.OnInventory;
            @inventory.performed -= instance.OnInventory;
            @inventory.canceled -= instance.OnInventory;
            @grab.started -= instance.OnGrab;
            @grab.performed -= instance.OnGrab;
            @grab.canceled -= instance.OnGrab;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
            @run.started -= instance.OnRun;
            @run.performed -= instance.OnRun;
            @run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IAMActions instance)
        {
            if (m_Wrapper.m_AMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAMActions instance)
        {
            foreach (var item in m_Wrapper.m_AMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AMActions @AM => new AMActions(this);
    public interface IAMActions
    {
        void OnDirection(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
