//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""AM"",
            ""id"": ""8e1a44de-6c3c-4218-803d-c25930fd072e"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""0825c8bf-5d0c-4521-820c-b67e3b89707a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1595db2-f58f-4923-bfdf-8b45ec841dd8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AM
        m_AM = asset.FindActionMap("AM", throwIfNotFound: true);
        m_AM_Grab = m_AM.FindAction("Grab", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AM
    private readonly InputActionMap m_AM;
    private List<IAMActions> m_AMActionsCallbackInterfaces = new List<IAMActions>();
    private readonly InputAction m_AM_Grab;
    public struct AMActions
    {
        private @Controls m_Wrapper;
        public AMActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_AM_Grab;
        public InputActionMap Get() { return m_Wrapper.m_AM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AMActions set) { return set.Get(); }
        public void AddCallbacks(IAMActions instance)
        {
            if (instance == null || m_Wrapper.m_AMActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AMActionsCallbackInterfaces.Add(instance);
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
        }

        private void UnregisterCallbacks(IAMActions instance)
        {
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
        }

        public void RemoveCallbacks(IAMActions instance)
        {
            if (m_Wrapper.m_AMActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAMActions instance)
        {
            foreach (var item in m_Wrapper.m_AMActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AMActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AMActions @AM => new AMActions(this);
    public interface IAMActions
    {
        void OnGrab(InputAction.CallbackContext context);
    }
}
